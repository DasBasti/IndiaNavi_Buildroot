//  Memory map file to generate linker scripts for programs run on the ISS.

// Customer ID=4313; Build=0x7e74b; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

//  Place stack in local RAM:
PLACE SECTIONS(STACK) WITH_SECTION(.dram0.bss)

// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

// Additions for -mvecbase option:
VECBASE = 0xf3333800


// Additions for -mvecselect option:
VECSELECT = 0x0


// Additions for -syscore option:
SYSCORE = DSP_3


// Additions for -reset-table-vaddr option:
RESET_TABLE_VADDR = 0xe66668bc

BEGIN dram1
0xcff80000: dataRam : dram1 : 0x40000 : writable ;
 dram1_0 : C : 0xcff80000 - 0xcffbffff : .dram1.rodata .dram1.data .dram1.bss;
END dram1

BEGIN dram0
0xcffc0000: dataRam : dram0 : 0x40000 : writable ;
 dram0_0 : C : 0xcffc0000 - 0xcfffffff :  STACK : .dram0.rodata .dram0.data .dram0.bss;
END dram0

BEGIN iram0
0xd0000000: instRam : iram0 : 0x8000 : executable, writable ;
 iram0_0 : C : 0xd0000000 - 0xd0007fff : .iram0.literal .iram0.text;
END iram0

BEGIN sysrom
0xd0a1999c: sysrom : sysrom : 0x333334 : executable ;
 sysrom0 : C : 0xd0a1999c - 0xd0d4cccf : .sysrom.rodata .sysrom.literal .sysrom.text .rom.store;
END sysrom

BEGIN sysram
0xe0000000: sysram : sysram : 0x19999a34 : executable, writable ;
 sysram0 : F : 0xe0000000 - 0xe00002ff : .SharedResetVector.text;
 sysram1 : C : 0xe66668c8 - 0xe66668cb : .ResetTable.rodata;
 sysram2 : C : 0xf3333468 - 0xf33337ff : .ResetHandler.literal .ResetVector.text .ResetHandler.text;
 sysram3 : F : 0xf3333800 - 0xf333397f : .WindowVectors.text .Level2InterruptVector.literal;
 sysram4 : F : 0xf3333980 - 0xf33339bf : .Level2InterruptVector.text .DebugExceptionVector.literal;
 sysram5 : F : 0xf33339c0 - 0xf33339ff : .DebugExceptionVector.text .NMIExceptionVector.literal;
 sysram6 : F : 0xf3333a00 - 0xf3333a3f : .NMIExceptionVector.text .KernelExceptionVector.literal;
 sysram7 : F : 0xf3333a40 - 0xf3333a7f : .KernelExceptionVector.text .UserExceptionVector.literal;
 sysram8 : F : 0xf3333a80 - 0xf3333aff : .UserExceptionVector.text .DoubleExceptionVector.literal;
 sysram9 : F : 0xf3333b00 - 0xf9999a33 :  HEAP : .DoubleExceptionVector.text .sysram.rodata .clib.rodata .rtos.rodata .rodata .sysram.literal .literal .rtos.literal .clib.literal .sysram.text .text .clib.text .rtos.text .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .sysram.data .data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .sysram.bss .bss;
END sysram

